/**
 * @file
 * This creates the custom responsive table functionality for Digital Loom
 */
(function ($) {

  /**
   * Detect if Table is Responsive, and add or remove class .responsive depending of the result
   *
   * Table marked as responsive if columns are less than 200px wide.
   *
   * @param {object} tableID
   * @param {integer} breakpoint
   * @return {bool} isResponsive
   */
  function detectResponsiveTables(tableID) {
    var $table       = $(tableID),
      minColWidth  = 200, //px
      countCol     = $table.find("tbody tr:first-child td").length, // Number of Columns
      isResponsive = false;

    if (countCol * minColWidth > $table.parent().width()) {
      isResponsive = true;
      $table.addClass("responsive");
    }
    else {
      $table.removeClass("responsive");
    }
    toggleSticky(tableID,isResponsive);
    return isResponsive;
  }

  /**
   * Fix Responsiveness for Sticky Table generated by Views -
   * @param {object} tableID
   * @param {bool} isResponsive
   */
  function toggleSticky(tableID,isResponsive) {
    var $table = $(tableID),
      isSticky = $table.prevAll('table.sticky-header'),
      ColCount = parseInt($("thead tr:last-child th:last-child", tableID).index() + 1);

    // Detect Sticky Table
    if (isSticky.length > 0) {
      for(var i = 1; i <= ColCount; i++) {
        var thWidth = $('tbody tr:first-child td:nth-child(' + i + ')', tableID).outerWidth(true);
        $('th:nth-child(' + i + ')', this).css({'width': thWidth});
      }

      if (isResponsive) {
        isSticky.hide();
        $table.removeClass('sticky-table sticky-enabled');
        $('th',isSticky).css({'display':'none'});
      }
      else {
        isSticky.show();
        $table.addClass('sticky-table sticky-enabled');
        $('th',isSticky).css({'display':'table-cell'});
      }
    }
  }

  /**
   * Remove Empty Cells When table is Responsive
   * @param {object} table
   * @param {boolean} isResponsive
   */
  function removeEmptyCells(table,isResponsive) {
    $("td",table).each(function() {
      var $td = $(this),
        tdContent = $td.html().trim();
      $td.css("display", '');
      if(isResponsive === false ) {
        return;
      }
      if (tdContent == "") {
        $td.css("display", 'none');
      }
    });
  }

  /**
   * Set Layout Table
   * @param {object} $tables
   */
  function setLayoutTables($tables) {
    $tables.each(function() {
      var targetTable = this,
        isResponsive = detectResponsiveTables(targetTable);

      removeEmptyCells(targetTable, isResponsive);
    });
  }

  /**
   * Set Data Table
   * @param {object} $tables
   */
  function setDataTables($tables) {
    $tables.addClass("dt-responsive");
    // Use the retrieve option to prevent DataTables from yelling at us that the
    // datatable already exists
    $tables.dataTable({"retrieve": true, "paging": false, "searching": false, "info": false, "sort": false});
  }

  /**
   * Set Responsive Tables - Main Function
   *
   */
  function setResponsiveTables() {
    var $layoutTables = $('table.layout-table'),
    // Ignore layout tables, flagged tables (.ignore-responsive), and the Calendar table (.full)
      $dataTables = $('table:not(.layout-table, .ignore-responsive, .full)');

    setLayoutTables($layoutTables);
    setDataTables($dataTables);
  } // end setResponseTables()


  $.fn.addColNumber = function() {
    var $this = $(this),
      countCol = $this.find("tr:first td").length;

    if (countCol === 0){
      countCol = $this.find("tr:first th").length;
    }
    $this.addClass('col-'+countCol +' responsiveTablesProcessed');
  };

  //Pulling this functionality out, to reduce nesting madness
  function initResponsiveTables() {
    var resizeTimer;
    $(window).on("load resize orientationchange",function(e){
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(setResponsiveTables, 100);
    });
  }

  Drupal.behaviors.responsiveTables = {
    attach: function (context, settings) {
      if ($('table').length === 0) {
        return;
      }
      $('table').each(function() {
        var $table = $(this);

        if ($table.hasClass("responsiveTablesProcessed")) {
          return;
        }

        $table.addColNumber();

        // Detect video iframe on a table  and assigned a width to the cell
        $("td div.media_embed", this).each(function() {
          if($('iframe', this).length > 0 ) {
            var w = $('iframe', this).attr('width');
            $(this).closest('td').css('width', w);
          }
        });

        // Add Responsible Table to table views with header
        if ($table.hasClass("views-table")) {
          if ($("thead", this).length !== 0 ) {
            $table.addClass('responsive-table-with-label');
          }
          else {
            $table.addClass('responsive-table');
          }
        }
      });

      initResponsiveTables();
    }
  };
})(jQuery);
